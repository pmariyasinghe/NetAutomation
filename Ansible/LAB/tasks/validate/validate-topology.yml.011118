---
##### COMMAND: ansible-playbook -i hosts tasks/validate/validate-topology.yml --ask-pass
- name: Generate Topology config
  hosts: veos-lab
  tasks:
  - template: src=/vagrant/NetAutomation/Ansible/LAB/templates/{{dev_os}}/topology_validation.j2 dest=/vagrant/NetAutomation/Ansible/LAB/ConfigRepos/topology/{{hostname}}_topology

- name: Create topology log file for each host  if doesnt exist
  hosts: veos-lab
  tasks:
  - file: path=/vagrant/NetAutomation/Ansible/LAB/ConfigRepos/LOGS/{{hostname}}_topology.log state=touch

- name: Topology validation
  hosts: veos-lab
  tasks:
  - script: /usr/bin/python /vagrant/NetAutomation/Ansible/LAB/scripts/lab_show_lldp_neighbours.py {{hostname}} /vagrant/NetAutomation/Ansible/LAB/ConfigRepos/topology/{{hostname}}_topology {{ansible_ssh_pass}}

#- name: Topology validation update results
#  hosts: veos-lab
#  tasks:
#  - shell: cat /vagrant/NetAutomation/Ansible/LAB/ConfigRepos/topology/{{hostname}}_topology
#    register: result
#  - debug: var={{ (result.stdout | from_json | first).validation }}
##  - set_fact: 
##    with_item: {{topology}}
##    when: {{ ((result.stdout | from_json | {{item}}).validation == 'PASS' }}
#    when: {{ ((result.stdout | from_json | {{item}}).neighborDevice == topology[item].neighborDevice }}
#  - debug: "{{ item }}" 
#    loop: "{{ result.stdout }}" 
##    myvar: "{{ result.stdout | to_yaml }}"
##  - set_fact: lldp_neighbors={{ result.stdout[0] | to_yaml }}
##  - debug: msg=result.stdout[0]

- name: Topology validation update results
  hosts: veos-lab
  tasks:
  - shell: cat /vagrant/NetAutomation/Ansible/LAB/ConfigRepos/topology/{{hostname}}_topology
    register: result
#  - debug: var=item.neighborDevice
#  - debug: msg={{ item['neighborDevice'] }}
#  - debug: msg={{hostvars[item]['topology']}}
#  - debug: msg={{item.neighborDevice}}
#    with_items: "{{ for host in groups['veos-lab'] | hostvars[host]['topology'] }}"
#    with_items: "{{ groups['veos-lab'] }}"
#  - set_fact: item.0['validation'] = "{{item.1.validation}}"
  - set_fact: 
     _validation_var : '{ validation : "PASS" }'
  - debug: msg={{item.1}}
    when: >
     item.0['neighborDevice'] == item.1.neighborDevice and
     item.1.validation == "PASS"
#  - debug: var="{{ item.validation }}"
#    with_items: "{{ result.stdout }}"
    with_together: 
       - "{{ topology }}"
       - "{{ result.stdout }}"


